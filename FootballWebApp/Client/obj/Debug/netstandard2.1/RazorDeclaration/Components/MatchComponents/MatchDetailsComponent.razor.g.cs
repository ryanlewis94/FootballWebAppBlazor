#pragma checksum "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\Components\MatchComponents\MatchDetailsComponent.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7fbfc37f0913888113b77f9938e694b86b830e9a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FootballWebApp.Client.Components.MatchComponents
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using FootballWebApp.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using FootballWebApp.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using FootballWebApp.Shared.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\Components\MatchComponents\MatchDetailsComponent.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\Components\MatchComponents\MatchDetailsComponent.razor"
using FootballWebApp.Shared.Entities.Events;

#line default
#line hidden
#nullable disable
    public partial class MatchDetailsComponent : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 85 "C:\Users\Ryan\Desktop\Web\Repositories\FootballWebAppBlazor\FootballWebApp\Client\Components\MatchComponents\MatchDetailsComponent.razor"
       
    List<Event> events;
    List<Logo> teamLogos;

    List<EventDto> HomeList = new List<EventDto>();
    List<EventDto> AwayList = new List<EventDto>();

    string CountdownTime;
    DateTime FixtureKickOffTime;

    protected override async Task OnInitializedAsync()
    {
        appState.OnChange += StateHasChanged;

        await GetTeamLogos();

        if (appState.SelectedMatch.score != null)
        {
            await GetEvents();
        }
        else
        {
            FixtureTimer();
        }
    }

    private async Task GetEvents()
    {
        events = await Http.PostJsonAsync<List<Event>>("Football/events", appState.SelectedMatch);

        var BlankEvent = new EventDto();
        if (events != null) if (events.Count != 0)
            {
                foreach (Event @event in events)
                {
                    //format the player name so the first name is displayed before the last name
                    int idx = @event.player.LastIndexOf(" ");
                    string playerToAdd;
                    if (idx != -1)
                    {
                        playerToAdd = $"{@event.player.Substring(idx + 1)} {@event.player.Substring(0, idx)}";
                    }
                    else
                    {
                        playerToAdd = @event.player;
                    }

                    string eventImage;
                    switch (@event.@event)
                    {
                        case "GOAL":
                            eventImage = "../../Images/Goal.png";
                            break;
                        case "GOAL_PENALTY":
                            eventImage = "../../Images/Penalty.png";
                            break;
                        case "OWN_GOAL":
                            eventImage = "../../Images/ownGoal.png";
                            break;
                        case "YELLOW_CARD":
                            eventImage = "../../Images/Yellow.png";
                            break;
                        case "RED_CARD":
                            eventImage = "../../Images/Red.png";
                            break;
                        case "YELLOW_RED_CARD":
                            eventImage = "../../Images/YellowRed.png";
                            break;
                        default:
                            eventImage = @event.@event;
                            break;
                    }

                    var EventToAdd = new EventDto
                    {
                        id = @event.id,
                        match_id = @event.match_id,
                        player = playerToAdd,
                        time = @event.time,
                        eventImage = eventImage,
                        sort = @event.sort,
                        home_away = @event.home_away
                    };

                    if (@event.home_away == "h")
                    {
                        HomeList.Insert(0, EventToAdd);
                        AwayList.Insert(0, BlankEvent);
                    }
                    else
                    {
                        AwayList.Insert(0, EventToAdd);
                        HomeList.Insert(0, BlankEvent);
                    }
                }
            }
    }

    private async Task GetTeamLogos()
    {
        teamLogos = await Http.GetJsonAsync<List<Logo>>("Football/teamLogos");

        foreach (var logo in teamLogos)
        {
            if (appState.SelectedMatch.home_name.ToLower() == logo.team_name.ToLower() ||
                appState.SelectedMatch.home_name.Contains(logo.team_name) ||
                $"FC {appState.SelectedMatch.home_name}".Contains(logo.team_name) ||
                $"{appState.SelectedMatch.home_name} FC".Contains(logo.team_name))
            {
                appState.SelectedMatch.home_logo = logo.logo;
            }
            if (appState.SelectedMatch.away_name.ToLower() == logo.team_name.ToLower() ||
                appState.SelectedMatch.away_name.Contains(logo.team_name) ||
                $"FC {appState.SelectedMatch.away_name}".Contains(logo.team_name) ||
                $"{appState.SelectedMatch.away_name} FC".Contains(logo.team_name))
            {
                appState.SelectedMatch.away_logo = logo.logo;
            }
        }
    }

    private void FixtureTimer()
    {
        FixtureKickOffTime = DateTime.Parse($"{appState.SelectedMatch.date} {appState.SelectedMatch.time}");
        if (appState.SelectedMatch.time == "00:00" || appState.SelectedMatch.time == "00:30" || appState.SelectedMatch.time == "01:00")
        {
            FixtureKickOffTime = FixtureKickOffTime.AddDays(1);
        }
        TimeSpan ts = FixtureKickOffTime.Subtract(DateTime.Now);
        string timeLeft = ts.ToString().Split('.')[0];
        CountdownTime = ts.ToString("d' days 'h' hrs 'm' min 's' sec'");

        var timer = new Timer(new TimerCallback(_ =>
        {
            ts = FixtureKickOffTime.Subtract(DateTime.Now);
            timeLeft = ts.ToString().Split('.')[0];
            CountdownTime = ts.ToString("d' days 'h' hrs 'm' min 's' sec'");
            if (timeLeft != "00:00:00")
            {

            this.StateHasChanged();
            }
        }), null, 1000, 1000);
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
        this.Dispose();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState appState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
